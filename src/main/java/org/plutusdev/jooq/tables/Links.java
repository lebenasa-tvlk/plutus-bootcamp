/*
 * This file is generated by jOOQ.
 */
package org.plutusdev.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.plutusdev.jooq.Bootcamp;
import org.plutusdev.jooq.Keys;
import org.plutusdev.jooq.tables.records.LinksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Links extends TableImpl<LinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bootcamp.links</code>
     */
    public static final Links LINKS = new Links();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinksRecord> getRecordType() {
        return LinksRecord.class;
    }

    /**
     * The column <code>bootcamp.links.id</code>.
     */
    public final TableField<LinksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bootcamp.links.link</code>.
     */
    public final TableField<LinksRecord, String> LINK = createField(DSL.name("link"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bootcamp.links.description</code>.
     */
    public final TableField<LinksRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bootcamp.links.status</code>.
     */
    public final TableField<LinksRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>bootcamp.links.created_by</code>.
     */
    public final TableField<LinksRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bootcamp.links.created_on</code>.
     */
    public final TableField<LinksRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>bootcamp.links.updated_by</code>.
     */
    public final TableField<LinksRecord, Integer> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bootcamp.links.updated_on</code>.
     */
    public final TableField<LinksRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Links(Name alias, Table<LinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Links(Name alias, Table<LinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>bootcamp.links</code> table reference
     */
    public Links(String alias) {
        this(DSL.name(alias), LINKS);
    }

    /**
     * Create an aliased <code>bootcamp.links</code> table reference
     */
    public Links(Name alias) {
        this(alias, LINKS);
    }

    /**
     * Create a <code>bootcamp.links</code> table reference
     */
    public Links() {
        this(DSL.name("links"), null);
    }

    public <O extends Record> Links(Table<O> child, ForeignKey<O, LinksRecord> key) {
        super(child, key, LINKS);
    }

    @Override
    public Schema getSchema() {
        return Bootcamp.BOOTCAMP;
    }

    @Override
    public Identity<LinksRecord, Integer> getIdentity() {
        return (Identity<LinksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LinksRecord> getPrimaryKey() {
        return Keys.LINKS_PKEY;
    }

    @Override
    public List<UniqueKey<LinksRecord>> getKeys() {
        return Arrays.<UniqueKey<LinksRecord>>asList(Keys.LINKS_PKEY);
    }

    @Override
    public List<ForeignKey<LinksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LinksRecord, ?>>asList(Keys.LINKS__FK_LINK_CREATED_BY, Keys.LINKS__FK_LINK_UPDATED_BY);
    }

    public Users fkLinkCreatedBy() {
        return new Users(this, Keys.LINKS__FK_LINK_CREATED_BY);
    }

    public Users fkLinkUpdatedBy() {
        return new Users(this, Keys.LINKS__FK_LINK_UPDATED_BY);
    }

    @Override
    public Links as(String alias) {
        return new Links(DSL.name(alias), this);
    }

    @Override
    public Links as(Name alias) {
        return new Links(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(String name) {
        return new Links(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Name name) {
        return new Links(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Short, Integer, OffsetDateTime, Integer, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
